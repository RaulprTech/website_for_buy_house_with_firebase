{"ast":null,"code":"import { useState, useEffect } from 'react'; // Hook\n\nexport default function useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (false) {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      } // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}","map":{"version":3,"sources":["/home/raulprtech/code/projects/houseforsale/hooks/useWindowSize.js"],"names":["useState","useEffect","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,eAAe,SAASC,aAAT,GAAyB;AACpC;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BJ,QAAQ,CAAC;AACzCK,IAAAA,KAAK,EAAEC,SADkC;AAEzCC,IAAAA,MAAM,EAAED;AAFiC,GAAD,CAA5C;AAKAL,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,eAAmC;AAC/B;AACA,eAASO,YAAT,GAAwB;AACpB;AACAJ,QAAAA,aAAa,CAAC;AACVC,UAAAA,KAAK,EAAEI,MAAM,CAACC,UADJ;AAEVH,UAAAA,MAAM,EAAEE,MAAM,CAACE;AAFL,SAAD,CAAb;AAIH,OAR8B,CAU/B;;;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAX+B,CAa/B;;AACAA,MAAAA,YAAY,GAdmB,CAgB/B;;AACA,aAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACH;AACJ,GArBQ,EAqBN,EArBM,CAAT,CAPoC,CA4B5B;;AACR,SAAOL,UAAP;AACH","sourcesContent":["import { useState, useEffect } from 'react';\n\n// Hook\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // only execute all the code below in client side\n        if (typeof window !== 'undefined') {\n            // Handler to call on window resize\n            function handleResize() {\n                // Set window width/height to state\n                setWindowSize({\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                });\n            }\n\n            // Add event listener\n            window.addEventListener(\"resize\", handleResize);\n\n            // Call handler right away so state gets updated with initial window size\n            handleResize();\n\n            // Remove event listener on cleanup\n            return () => window.removeEventListener(\"resize\", handleResize);\n        }\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n}"]},"metadata":{},"sourceType":"module"}