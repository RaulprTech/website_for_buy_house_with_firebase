{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react'; // Hook\n\nexport default function useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  var _useState = useState({\n    width: undefined,\n    height: undefined\n  }),\n      windowSize = _useState[0],\n      setWindowSize = _useState[1];\n\n  useEffect(function () {\n    // only execute all the code below in client side\n    if (true) {\n      // Handler to call on window resize\n      var handleResize = function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      }; // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return function () {\n        return window.removeEventListener(\"resize\", handleResize);\n      };\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"Lx6dFCJt7Ze4WyzsCH5RzM+GN9Y=\");","map":{"version":3,"sources":["/home/raul/Documentos/Proyectos/Flexxo/flexxo-web/hooks/useWindowsSize.js"],"names":["useState","useEffect","useWindowSize","width","undefined","height","windowSize","setWindowSize","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;AACA,eAAe,SAASC,aAAT,GAAyB;AAAA;;AACpC;AADoC,kBAEAF,QAAQ,CAAC;AACzCG,IAAAA,KAAK,EAAEC,SADkC;AAEzCC,IAAAA,MAAM,EAAED;AAFiC,GAAD,CAFR;AAAA,MAE7BE,UAF6B;AAAA,MAEjBC,aAFiB;;AAOpCN,EAAAA,SAAS,CAAC,YAAM;AACZ;AACA,cAAmC;AAC/B;AAD+B,UAEtBO,YAFsB,GAE/B,SAASA,YAAT,GAAwB;AACpB;AACAD,QAAAA,aAAa,CAAC;AACVJ,UAAAA,KAAK,EAAEM,MAAM,CAACC,UADJ;AAEVL,UAAAA,MAAM,EAAEI,MAAM,CAACE;AAFL,SAAD,CAAb;AAIH,OAR8B,EAU/B;;;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAX+B,CAa/B;;AACAA,MAAAA,YAAY,GAdmB,CAgB/B;;AACA,aAAO;AAAA,eAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAN;AAAA,OAAP;AACH;AACJ,GArBQ,EAqBN,EArBM,CAAT,CAPoC,CA4B5B;;AACR,SAAOF,UAAP;AACH;;GA9BuBJ,a","sourcesContent":["import { useState, useEffect } from 'react';\n\n// Hook\nexport default function useWindowSize() {\n    // Initialize state with undefined width/height so server and client renders match\n    const [windowSize, setWindowSize] = useState({\n        width: undefined,\n        height: undefined,\n    });\n\n    useEffect(() => {\n        // only execute all the code below in client side\n        if (typeof window !== 'undefined') {\n            // Handler to call on window resize\n            function handleResize() {\n                // Set window width/height to state\n                setWindowSize({\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                });\n            }\n\n            // Add event listener\n            window.addEventListener(\"resize\", handleResize);\n\n            // Call handler right away so state gets updated with initial window size\n            handleResize();\n\n            // Remove event listener on cleanup\n            return () => window.removeEventListener(\"resize\", handleResize);\n        }\n    }, []); // Empty array ensures that effect is only run on mount\n    return windowSize;\n}"]},"metadata":{},"sourceType":"module"}