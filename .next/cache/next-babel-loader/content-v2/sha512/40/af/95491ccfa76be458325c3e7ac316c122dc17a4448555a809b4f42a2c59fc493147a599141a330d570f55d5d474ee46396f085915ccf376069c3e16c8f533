{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n// Hook (use-auth.js)\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport firebase from 'firebase';\nimport \"firebase/auth\"; // Add your Firebase credentials\n\n!firebase.apps.length && firebase.initializeApp({\n  apiKey: \"AIzaSyAb42q41W0gH-0OHLPw6mOHcvQoGFFfwtE\",\n  authDomain: \"flexxo-dev.firebaseapp.com\",\n  databaseURL: \"https://flexxo-dev-default-rtdb.firebaseio.com\",\n  projectId: \"flexxo-dev\",\n  storageBucket: \"flexxo-dev.appspot.com\",\n  messagingSenderId: \"462526675458\",\n  appId: \"1:462526675458:web:6156527a55904bd5e1051b\",\n  measurementId: \"G-E04VE4YK0W\"\n});\nvar authContext = /*#__PURE__*/createContext(); // Provider component that wraps your app and makes auth object ...\n// ... available to any child component that calls useAuth().\n\nexport function ProvideAuth(_ref) {\n  var children = _ref.children;\n  var auth = useProvideAuth();\n  return /*#__PURE__*/_jsx(authContext.Provider, {\n    value: auth,\n    children: children\n  });\n} // Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\nexport var useAuth = function useAuth() {\n  return useContext(authContext);\n}; // Provider hook that creates auth object and handles state\n\nfunction useProvideAuth() {\n  var _useState = useState(null),\n      user = _useState[0],\n      setUser = _useState[1]; // Wrap any Firebase methods we want to use making sure ...\n  // ... to save the user to state.\n\n\n  var signin = function signin(email, password) {\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(function (response) {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  var signup = function signup(email, password) {\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(function (response) {\n      setUser(response.user);\n      return response.user;\n    });\n  };\n\n  var signout = function signout() {\n    return firebase.auth().signOut().then(function () {\n      setUser(false);\n    });\n  };\n\n  var sendPasswordResetEmail = function sendPasswordResetEmail(email) {\n    return firebase.auth().sendPasswordResetEmail(email).then(function () {\n      return true;\n    });\n  };\n\n  var confirmPasswordReset = function confirmPasswordReset(code, password) {\n    return firebase.auth().confirmPasswordReset(code, password).then(function () {\n      return true;\n    });\n  }; // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n\n  useEffect(function () {\n    var unsubscribe = firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(false);\n      }\n    }); // Cleanup subscription on unmount\n\n    return function () {\n      return unsubscribe();\n    };\n  }, []); // Return the user object and auth methods\n\n  return {\n    user: user,\n    signin: signin,\n    signup: signup,\n    signout: signout,\n    sendPasswordResetEmail: sendPasswordResetEmail,\n    confirmPasswordReset: confirmPasswordReset\n  };\n}","map":null,"metadata":{},"sourceType":"module"}