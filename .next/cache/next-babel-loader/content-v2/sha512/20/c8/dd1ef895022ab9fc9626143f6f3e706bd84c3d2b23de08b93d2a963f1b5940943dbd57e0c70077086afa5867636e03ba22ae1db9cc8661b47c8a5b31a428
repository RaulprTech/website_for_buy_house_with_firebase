{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/raul/Documentos/Proyectos/Flexxo/flexxo-web/components/container.jsx\";\nimport Header from \"./header\";\nimport Nav from '../components/nav';\nimport { useState, useEffect } from 'react';\nexport default function Container(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white text-gray-800 rounded-xl shadow-lg overflow-hidden relative min-w-full h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [size.width, \"px / \", size.height, \"px\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white h-full w-full px-5 pt-6 pb-20 overflow-y-auto\",\n        children: props.children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n} // Hook\n\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (false) {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight\n        });\n      } // Add event listener\n\n\n      window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n      handleResize(); // Remove event listener on cleanup\n\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}","map":{"version":3,"sources":["/home/raul/Documentos/Proyectos/Flexxo/flexxo-web/components/container.jsx"],"names":["Header","Nav","useState","useEffect","Container","props","size","width","height","children","useWindowSize","windowSize","setWindowSize","undefined","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAGA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACvC,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,0FAAf;AAAA,8BAIE;AAAA,mBACGC,IAAI,CAACC,KADR,WACoBD,IAAI,CAACE,MADzB;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAOE;AAAK,QAAA,SAAS,EAAC,wDAAf;AAAA,kBACGH,KAAK,CAACI;AADT;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,C,CAED;;AACA,SAASC,aAAT,GAAyB;AACvB;AACA;AACA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAAC;AAC3CK,IAAAA,KAAK,EAAEM,SADoC;AAE3CL,IAAAA,MAAM,EAAEK;AAFmC,GAAD,CAA5C;AAKAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,eAAmC;AACjC;AACA,eAASW,YAAT,GAAwB;AACtB;AACAF,QAAAA,aAAa,CAAC;AACZL,UAAAA,KAAK,EAAEQ,MAAM,CAACC,UADF;AAEZR,UAAAA,MAAM,EAAEO,MAAM,CAACE;AAFH,SAAD,CAAb;AAID,OARgC,CAUjC;;;AACAF,MAAAA,MAAM,CAACG,gBAAP,CAAwB,QAAxB,EAAkCJ,YAAlC,EAXiC,CAajC;;AACAA,MAAAA,YAAY,GAdqB,CAgBjC;;AACA,aAAO,MAAMC,MAAM,CAACI,mBAAP,CAA2B,QAA3B,EAAqCL,YAArC,CAAb;AACD;AACF,GArBQ,EAqBN,EArBM,CAAT,CARuB,CA6Bf;;AACR,SAAOH,UAAP;AACD","sourcesContent":["import Header from \"./header\"\nimport Nav from '../components/nav'\nimport { useState, useEffect } from 'react';\n\n\nexport default function Container(props) {\n  return (\n    <div>\n      <div className=\"bg-white text-gray-800 rounded-xl shadow-lg overflow-hidden relative min-w-full h-screen\">\n        {\n          //screen.width > 640 && <Header />\n        }\n        <div>\n          {size.width}px / {size.height}px\n        </div>\n        <div className=\"bg-white h-full w-full px-5 pt-6 pb-20 overflow-y-auto\" >\n          {props.children}\n        </div>\n        {\n          //screen.width <= 640 && <Nav />\n        }\n      </div>\n    </div>\n  )\n}\n\n// Hook\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // only execute all the code below in client side\n    if (typeof window !== 'undefined') {\n      // Handler to call on window resize\n      function handleResize() {\n        // Set window width/height to state\n        setWindowSize({\n          width: window.innerWidth,\n          height: window.innerHeight,\n        });\n      }\n\n      // Add event listener\n      window.addEventListener(\"resize\", handleResize);\n\n      // Call handler right away so state gets updated with initial window size\n      handleResize();\n\n      // Remove event listener on cleanup\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}"]},"metadata":{},"sourceType":"module"}