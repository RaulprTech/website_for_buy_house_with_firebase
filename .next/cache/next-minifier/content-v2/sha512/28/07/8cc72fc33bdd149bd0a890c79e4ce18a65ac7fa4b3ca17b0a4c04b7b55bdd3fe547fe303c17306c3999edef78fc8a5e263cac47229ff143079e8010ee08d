{"code":"(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[9],{AAub:function(e,t,n){\"use strict\";n.r(t);var r,i,a=n(\"mrSG\"),s=n(\"zIRd\"),o=(n(\"fSjL\"),n(\"q/0M\")),c=n(\"qOnz\"),u=n(\"/6Yf\"),l=\"https://www.googletagmanager.com/gtag/js\";!function(e){e.EVENT=\"event\",e.SET=\"set\",e.CONFIG=\"config\"}(r||(r={})),function(e){e.ADD_SHIPPING_INFO=\"add_shipping_info\",e.ADD_PAYMENT_INFO=\"add_payment_info\",e.ADD_TO_CART=\"add_to_cart\",e.ADD_TO_WISHLIST=\"add_to_wishlist\",e.BEGIN_CHECKOUT=\"begin_checkout\",e.CHECKOUT_PROGRESS=\"checkout_progress\",e.EXCEPTION=\"exception\",e.GENERATE_LEAD=\"generate_lead\",e.LOGIN=\"login\",e.PAGE_VIEW=\"page_view\",e.PURCHASE=\"purchase\",e.REFUND=\"refund\",e.REMOVE_FROM_CART=\"remove_from_cart\",e.SCREEN_VIEW=\"screen_view\",e.SEARCH=\"search\",e.SELECT_CONTENT=\"select_content\",e.SELECT_ITEM=\"select_item\",e.SELECT_PROMOTION=\"select_promotion\",e.SET_CHECKOUT_OPTION=\"set_checkout_option\",e.SHARE=\"share\",e.SIGN_UP=\"sign_up\",e.TIMING_COMPLETE=\"timing_complete\",e.VIEW_CART=\"view_cart\",e.VIEW_ITEM=\"view_item\",e.VIEW_ITEM_LIST=\"view_item_list\",e.VIEW_PROMOTION=\"view_promotion\",e.VIEW_SEARCH_RESULTS=\"view_search_results\"}(i||(i={}));var d,f=new o.b(\"@firebase/analytics\");function h(e,t,n,i,s,o){return Object(a.b)(this,void 0,void 0,(function(){var c,u,l,d;return Object(a.d)(this,(function(a){switch(a.label){case 0:c=i[s],a.label=1;case 1:return a.trys.push([1,7,,8]),c?[4,t[c]]:[3,3];case 2:return a.sent(),[3,6];case 3:return[4,Promise.all(n)];case 4:return u=a.sent(),(l=u.find((function(e){return e.measurementId===s})))?[4,t[l.appId]]:[3,6];case 5:a.sent(),a.label=6;case 6:return[3,8];case 7:return d=a.sent(),f.error(d),[3,8];case 8:return e(r.CONFIG,s,o),[2]}}))}))}function p(e,t,n,i,s){return Object(a.b)(this,void 0,void 0,(function(){var o,c,u,l,d,h,p,m;return Object(a.d)(this,(function(a){switch(a.label){case 0:return a.trys.push([0,4,,5]),o=[],s&&s.send_to?(c=s.send_to,Array.isArray(c)||(c=[c]),[4,Promise.all(n)]):[3,2];case 1:for(u=a.sent(),l=function(e){var n=u.find((function(t){return t.measurementId===e})),r=n&&t[n.appId];if(!r)return o=[],\"break\";o.push(r)},d=0,h=c;d<h.length&&(p=h[d],\"break\"!==l(p));d++);a.label=2;case 2:return 0===o.length&&(o=Object.values(t)),[4,Promise.all(o)];case 3:return a.sent(),e(r.EVENT,i,s||{}),[3,5];case 4:return m=a.sent(),f.error(m),[3,5];case 5:return[2]}}))}))}function m(e,t,n,i,s){var o=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];window[i].push(arguments)};return window[s]&&\"function\"===typeof window[s]&&(o=window[s]),window[s]=function(e,t,n,i){return function(s,o,c){return Object(a.b)(this,void 0,void 0,(function(){var u;return Object(a.d)(this,(function(a){switch(a.label){case 0:return a.trys.push([0,6,,7]),s!==r.EVENT?[3,2]:[4,p(e,t,n,o,c)];case 1:return a.sent(),[3,5];case 2:return s!==r.CONFIG?[3,4]:[4,h(e,t,n,i,o,c)];case 3:return a.sent(),[3,5];case 4:e(r.SET,o),a.label=5;case 5:return[3,7];case 6:return u=a.sent(),f.error(u),[3,7];case 7:return[2]}}))}))}}(o,e,t,n),{gtagCore:o,wrappedGtag:window[s]}}var b=((d={})[\"already-exists\"]=\"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.\",d[\"already-initialized\"]=\"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.\",d[\"interop-component-reg-failed\"]=\"Firebase Analytics Interop Component failed to instantiate: {$reason}\",d[\"invalid-analytics-context\"]=\"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}\",d[\"indexeddb-unavailable\"]=\"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}\",d[\"fetch-throttle\"]=\"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.\",d[\"config-fetch-failed\"]=\"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}\",d[\"no-api-key\"]='The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',d[\"no-app-id\"]='The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',d),v=new c.b(\"analytics\",\"Analytics\",b),I=new(function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t=1e3),this.throttleMetadata=e,this.intervalMillis=t}return e.prototype.getThrottleMetadata=function(e){return this.throttleMetadata[e]},e.prototype.setThrottleMetadata=function(e,t){this.throttleMetadata[e]=t},e.prototype.deleteThrottleMetadata=function(e){delete this.throttleMetadata[e]},e}());function g(e){return new Headers({Accept:\"application/json\",\"x-goog-api-key\":e})}function w(e){var t;return Object(a.b)(this,void 0,void 0,(function(){var n,r,i,s,o,c,u;return Object(a.d)(this,(function(a){switch(a.label){case 0:return n=e.appId,r=e.apiKey,i={method:\"GET\",headers:g(r)},s=\"https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig\".replace(\"{app-id}\",n),[4,fetch(s,i)];case 1:if(200===(o=a.sent()).status||304===o.status)return[3,6];c=\"\",a.label=2;case 2:return a.trys.push([2,4,,5]),[4,o.json()];case 3:return u=a.sent(),(null===(t=u.error)||void 0===t?void 0:t.message)&&(c=u.error.message),[3,5];case 4:return a.sent(),[3,5];case 5:throw v.create(\"config-fetch-failed\",{httpStatus:o.status,responseMessage:c});case 6:return[2,o.json()]}}))}))}function E(e,t,n,r){var i=t.throttleEndTimeMillis,s=t.backoffCount;return void 0===r&&(r=I),Object(a.b)(this,void 0,void 0,(function(){var t,o,u,l,d,h,p;return Object(a.d)(this,(function(a){switch(a.label){case 0:t=e.appId,o=e.measurementId,a.label=1;case 1:return a.trys.push([1,3,,4]),[4,O(n,i)];case 2:return a.sent(),[3,4];case 3:if(u=a.sent(),o)return f.warn(\"Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID \"+o+' provided in the \"measurementId\" field in the local Firebase config. ['+u.message+\"]\"),[2,{appId:t,measurementId:o}];throw u;case 4:return a.trys.push([4,6,,7]),[4,w(e)];case 5:return l=a.sent(),r.deleteThrottleMetadata(t),[2,l];case 6:if(!function(e){if(!(e instanceof c.c)||!e.customData)return!1;var t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(d=a.sent())){if(r.deleteThrottleMetadata(t),o)return f.warn(\"Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID \"+o+' provided in the \"measurementId\" field in the local Firebase config. ['+d.message+\"]\"),[2,{appId:t,measurementId:o}];throw d}return h=503===Number(d.customData.httpStatus)?Object(c.j)(s,r.intervalMillis,30):Object(c.j)(s,r.intervalMillis),p={throttleEndTimeMillis:Date.now()+h,backoffCount:s+1},r.setThrottleMetadata(t,p),f.debug(\"Calling attemptFetch again in \"+h+\" millis\"),[2,E(e,p,n,r)];case 7:return[2]}}))}))}function O(e,t){return new Promise((function(n,r){var i=Math.max(t-Date.now(),0),a=setTimeout(n,i);e.addEventListener((function(){clearTimeout(a),r(v.create(\"fetch-throttle\",{throttleEndTimeMillis:t}))}))}))}var y=function(){function e(){this.listeners=[]}return e.prototype.addEventListener=function(e){this.listeners.push(e)},e.prototype.abort=function(){this.listeners.forEach((function(e){return e()}))},e}();function _(e,t,n,i,s){return Object(a.b)(this,void 0,void 0,(function(){var o,u,l,d,h,p,m;return Object(a.d)(this,(function(b){switch(b.label){case 0:return(o=function(e,t,n){return void 0===t&&(t=I),Object(a.b)(this,void 0,void 0,(function(){var r,i,s,o,c,u,l=this;return Object(a.d)(this,(function(d){if(r=e.options,i=r.appId,s=r.apiKey,o=r.measurementId,!i)throw v.create(\"no-app-id\");if(!s){if(o)return[2,{measurementId:o,appId:i}];throw v.create(\"no-api-key\")}return c=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},u=new y,setTimeout((function(){return Object(a.b)(l,void 0,void 0,(function(){return Object(a.d)(this,(function(e){return u.abort(),[2]}))}))}),void 0!==n?n:6e4),[2,E({appId:i,apiKey:s,measurementId:o},c,u,t)]}))}))}(e)).then((function(t){n[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&f.warn(\"The measurement ID in the local Firebase config (\"+e.options.measurementId+\") does not match the measurement ID fetched from the server (\"+t.measurementId+\"). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.\")})).catch((function(e){return f.error(e)})),t.push(o),u=function(){return Object(a.b)(this,void 0,void 0,(function(){var e;return Object(a.d)(this,(function(t){switch(t.label){case 0:return Object(c.w)()?[3,1]:(f.warn(v.create(\"indexeddb-unavailable\",{errorInfo:\"IndexedDB is not available in this environment.\"}).message),[2,!1]);case 1:return t.trys.push([1,3,,4]),[4,Object(c.N)()];case 2:return t.sent(),[3,4];case 3:return e=t.sent(),f.warn(v.create(\"indexeddb-unavailable\",{errorInfo:e}).message),[2,!1];case 4:return[2,!0]}}))}))}().then((function(e){return e?i.getId():void 0})),[4,Promise.all([o,u])];case 1:return l=b.sent(),d=l[0],h=l[1],s(\"js\",new Date),(m={}).origin=\"firebase\",m.update=!0,p=m,null!=h&&(p.firebase_id=h),s(r.CONFIG,d.measurementId,p),[2,d.measurementId]}}))}))}var T,j,N={},C=[],A={},S=\"dataLayer\",F=\"gtag\",M=!1;function D(e){if(M)throw v.create(\"already-initialized\");e.dataLayerName&&(S=e.dataLayerName),e.gtagName&&(F=e.gtagName)}function P(e,t){!function(){var e=[];if(Object(c.s)()&&e.push(\"This is a browser extension environment.\"),Object(c.e)()||e.push(\"Cookies are not available.\"),e.length>0){var t=e.map((function(e,t){return\"(\"+(t+1)+\") \"+e})).join(\" \"),n=v.create(\"invalid-analytics-context\",{errorInfo:t});f.warn(n.message)}}();var n=e.options.appId;if(!n)throw v.create(\"no-app-id\");if(!e.options.apiKey){if(!e.options.measurementId)throw v.create(\"no-api-key\");f.warn('The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID '+e.options.measurementId+' provided in the \"measurementId\" field in the local Firebase config.')}if(null!=N[n])throw v.create(\"already-exists\",{id:n});if(!M){(function(){for(var e=window.document.getElementsByTagName(\"script\"),t=0,n=Object.values(e);t<n.length;t++){var r=n[t];if(r.src&&r.src.includes(l))return r}return null})()||function(e){var t=document.createElement(\"script\");t.src=l+\"?l=\"+e,t.async=!0,document.head.appendChild(t)}(S),function(e){var t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(S);var i=m(N,C,A,S,F),s=i.wrappedGtag,o=i.gtagCore;j=s,T=o,M=!0}return N[n]=_(e,C,A,t,T),{app:e,logEvent:function(e,t,i){(function(e,t,n,i,s){return Object(a.b)(this,void 0,void 0,(function(){var o,c;return Object(a.d)(this,(function(u){switch(u.label){case 0:return s&&s.global?(e(r.EVENT,n,i),[2]):[3,1];case 1:return[4,t];case 2:o=u.sent(),c=Object(a.a)(Object(a.a)({},i),{send_to:o}),e(r.EVENT,n,c),u.label=3;case 3:return[2]}}))}))})(j,N[n],e,t,i).catch((function(e){return f.error(e)}))},setCurrentScreen:function(e,t){(function(e,t,n,i){return Object(a.b)(this,void 0,void 0,(function(){var s;return Object(a.d)(this,(function(a){switch(a.label){case 0:return i&&i.global?(e(r.SET,{screen_name:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,t];case 2:s=a.sent(),e(r.CONFIG,s,{update:!0,screen_name:n}),a.label=3;case 3:return[2]}}))}))})(j,N[n],e,t).catch((function(e){return f.error(e)}))},setUserId:function(e,t){(function(e,t,n,i){return Object(a.b)(this,void 0,void 0,(function(){var s;return Object(a.d)(this,(function(a){switch(a.label){case 0:return i&&i.global?(e(r.SET,{user_id:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,t];case 2:s=a.sent(),e(r.CONFIG,s,{update:!0,user_id:n}),a.label=3;case 3:return[2]}}))}))})(j,N[n],e,t).catch((function(e){return f.error(e)}))},setUserProperties:function(e,t){(function(e,t,n,i){return Object(a.b)(this,void 0,void 0,(function(){var s,o,c,u,l;return Object(a.d)(this,(function(a){switch(a.label){case 0:if(!i||!i.global)return[3,1];for(s={},o=0,c=Object.keys(n);o<c.length;o++)u=c[o],s[\"user_properties.\"+u]=n[u];return e(r.SET,s),[2,Promise.resolve()];case 1:return[4,t];case 2:l=a.sent(),e(r.CONFIG,l,{update:!0,user_properties:n}),a.label=3;case 3:return[2]}}))}))})(j,N[n],e,t).catch((function(e){return f.error(e)}))},setAnalyticsCollectionEnabled:function(e){(function(e,t){return Object(a.b)(this,void 0,void 0,(function(){var n;return Object(a.d)(this,(function(r){switch(r.label){case 0:return[4,e];case 1:return n=r.sent(),window[\"ga-disable-\"+n]=!t,[2]}}))}))})(N[n],e).catch((function(e){return f.error(e)}))},INTERNAL:{delete:function(){return delete N[n],Promise.resolve()}}}}var R,k=\"analytics\";function G(){return Object(a.b)(this,void 0,void 0,(function(){return Object(a.d)(this,(function(e){switch(e.label){case 0:if(Object(c.s)())return[2,!1];if(!Object(c.e)())return[2,!1];if(!Object(c.w)())return[2,!1];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Object(c.N)()];case 2:return[2,e.sent()];case 3:return e.sent(),[2,!1];case 4:return[2]}}))}))}(R=s.a).INTERNAL.registerComponent(new u.a(k,(function(e){return P(e.getProvider(\"app\").getImmediate(),e.getProvider(\"installations\").getImmediate())}),\"PUBLIC\").setServiceProps({settings:D,EventName:i,isSupported:G})),R.INTERNAL.registerComponent(new u.a(\"analytics-internal\",(function(e){try{return{logEvent:e.getProvider(k).getImmediate().logEvent}}catch(t){throw v.create(\"interop-component-reg-failed\",{reason:t})}}),\"PRIVATE\")),R.registerVersion(\"@firebase/analytics\",\"0.6.2\")}}]);","map":{"version":3,"sources":["static/chunks/analytics.be5f0dde4acc3873c13f.js"],"names":["window","push","AAub","module","__webpack_exports__","__webpack_require__","r","GtagCommand","EventName","tslib_es6","index_esm","logger_dist_index_esm","util_dist_index_esm","component_dist_index_esm","GTAG_URL","index_esm_a","logger","gtagOnConfig","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","measurementId","gtagParams","Object","this","correspondingAppId","dynamicConfigResults","foundConfig","e_1","_a","label","trys","sent","Promise","all","find","config","appId","error","CONFIG","gtagOnEvent","initializationPromisesToWaitFor","gaSendToList","_loop_1","_i","gaSendToList_1","sendToId","e_2","Array","isArray","initializationPromise","length","values","EVENT","wrapOrCreateGtag","dataLayerName","gtagFunctionName","_args","arguments","command","idOrNameOrParams","e_3","SET","wrapGtag","wrappedGtag","ERRORS","ERROR_FACTORY","defaultRetryData","RetryData","throttleMetadata","intervalMillis","prototype","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","getHeaders","apiKey","Headers","Accept","x-goog-api-key","fetchDynamicConfig","appFields","request","appUrl","response","errorMessage","jsonResponse","_b","method","headers","replace","fetch","status","json","message","create","httpStatus","responseMessage","attemptFetchDynamicConfigWithRetry","signal","retryData","throttleEndTimeMillis","backoffCount","backoffMillis","setAbortableTimeout","warn","e","customData","Number","isRetriableError","Date","now","debug","resolve","reject","Math","max","timeout","setTimeout","addEventListener","clearTimeout","AnalyticsAbortSignal","listeners","listener","abort","forEach","initializeIds","app","installations","dynamicConfigPromise","fidPromise","dynamicConfig","fid","configProperties","_c","timeoutMillis","_this","options","undefined","fetchDynamicConfigWithRetry","then","catch","errorInfo","validateIndexedDB","envIsValid","getId","update","gtagCoreFunction","wrappedGtagFunction","index_esm_initializationPromisesMap","index_esm_dynamicConfigPromisesList","index_esm_measurementIdToAppId","gtagName","globalInitDone","settings","factory","mismatchedEnvMessages","details","map","index","join","err","warnOnBrowserContextMismatch","id","scriptTags","document","getElementsByTagName","tag","src","includes","findGtagScriptOnPage","script","createElement","async","head","appendChild","insertScriptTag","dataLayer","getOrCreateDataLayer","logEvent","eventName","eventParams","gtagFunction","params","global","send_to","setCurrentScreen","screenName","screen_name","setUserId","user_id","setUserProperties","properties","flatProperties","key","keys","user_properties","setAnalyticsCollectionEnabled","enabled","INTERNAL","delete","instance","ANALYTICS_TYPE","isSupported","registerComponent","container","getProvider","getImmediate","setServiceProps","reason","registerVersion"],"mappings":"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"},"name":"static/chunks/analytics.be5f0dde4acc3873c13f.js","input":"(window[\"webpackJsonp_N_E\"] = window[\"webpackJsonp_N_E\"] || []).push([[9],{\n\n/***/ \"AAub\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(\"mrSG\");\n\n// EXTERNAL MODULE: ./node_modules/@firebase/app/dist/index.esm.js\nvar index_esm = __webpack_require__(\"zIRd\");\n\n// EXTERNAL MODULE: ./node_modules/@firebase/installations/dist/index.esm.js\nvar dist_index_esm = __webpack_require__(\"fSjL\");\n\n// EXTERNAL MODULE: ./node_modules/@firebase/logger/dist/index.esm.js\nvar logger_dist_index_esm = __webpack_require__(\"q/0M\");\n\n// EXTERNAL MODULE: ./node_modules/@firebase/util/dist/index.esm.js\nvar util_dist_index_esm = __webpack_require__(\"qOnz\");\n\n// EXTERNAL MODULE: ./node_modules/@firebase/component/dist/index.esm.js\nvar component_dist_index_esm = __webpack_require__(\"/6Yf\");\n\n// CONCATENATED MODULE: ./node_modules/@firebase/analytics/dist/index.esm.js\n\n\n\n\n\n\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Key to attach FID to in gtag params.\r\nvar GA_FID_KEY = 'firebase_id';\r\nvar ORIGIN_KEY = 'origin';\r\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\r\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\r\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\r\nvar GtagCommand;\r\n(function (GtagCommand) {\r\n    GtagCommand[\"EVENT\"] = \"event\";\r\n    GtagCommand[\"SET\"] = \"set\";\r\n    GtagCommand[\"CONFIG\"] = \"config\";\r\n})(GtagCommand || (GtagCommand = {}));\r\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\r\nvar EventName;\r\n(function (EventName) {\r\n    EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\r\n    EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\r\n    EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\r\n    EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\r\n    EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\r\n    /** @deprecated */\r\n    EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\r\n    EventName[\"EXCEPTION\"] = \"exception\";\r\n    EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\r\n    EventName[\"LOGIN\"] = \"login\";\r\n    EventName[\"PAGE_VIEW\"] = \"page_view\";\r\n    EventName[\"PURCHASE\"] = \"purchase\";\r\n    EventName[\"REFUND\"] = \"refund\";\r\n    EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\r\n    EventName[\"SCREEN_VIEW\"] = \"screen_view\";\r\n    EventName[\"SEARCH\"] = \"search\";\r\n    EventName[\"SELECT_CONTENT\"] = \"select_content\";\r\n    EventName[\"SELECT_ITEM\"] = \"select_item\";\r\n    EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\r\n    /** @deprecated */\r\n    EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\r\n    EventName[\"SHARE\"] = \"share\";\r\n    EventName[\"SIGN_UP\"] = \"sign_up\";\r\n    EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\r\n    EventName[\"VIEW_CART\"] = \"view_cart\";\r\n    EventName[\"VIEW_ITEM\"] = \"view_item\";\r\n    EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\r\n    EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\r\n    EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\r\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nfunction logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var measurementId, params;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\r\n                    return [2 /*return*/];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    params = Object(tslib_es6[\"a\" /* __assign */])(Object(tslib_es6[\"a\" /* __assign */])({}, eventParams), { 'send_to': measurementId });\r\n                    gtagFunction(GtagCommand.EVENT, eventName, params);\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\r\nfunction setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'screen_name': screenName\r\n                    });\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\r\nfunction setUserId(gtagFunction, initializationPromise, id, options) {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.SET, { 'user_id': id });\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'user_id': id\r\n                    });\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\r\nfunction setUserProperties(gtagFunction, initializationPromise, properties, options) {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var flatProperties, _i, _a, key, measurementId;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    flatProperties = {};\r\n                    for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\r\n                        key = _a[_i];\r\n                        // use dot notation for merge behavior in gtag.js\r\n                        flatProperties[\"user_properties.\" + key] = properties[key];\r\n                    }\r\n                    gtagFunction(GtagCommand.SET, flatProperties);\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _b.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'user_properties': properties\r\n                    });\r\n                    _b.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\r\nfunction setAnalyticsCollectionEnabled(initializationPromise, enabled) {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, initializationPromise];\r\n                case 1:\r\n                    measurementId = _a.sent();\r\n                    window[\"ga-disable-\" + measurementId] = !enabled;\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logger = new logger_dist_index_esm[\"b\" /* Logger */]('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction insertScriptTag(dataLayerName) {\r\n    var script = document.createElement('script');\r\n    // We are not providing an analyticsId in the URL because it would trigger a `page_view`\r\n    // without fid. We will initialize ga-id using gtag (config) command together with fid.\r\n    script.src = GTAG_URL + \"?l=\" + dataLayerName;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    var dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\r\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    correspondingAppId = measurementIdToAppId[measurementId];\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 7, , 8]);\r\n                    if (!correspondingAppId) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 3: return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\r\n                case 4:\r\n                    dynamicConfigResults = _a.sent();\r\n                    foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === measurementId; });\r\n                    if (!foundConfig) return [3 /*break*/, 6];\r\n                    return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];\r\n                case 5:\r\n                    _a.sent();\r\n                    _a.label = 6;\r\n                case 6: return [3 /*break*/, 8];\r\n                case 7:\r\n                    e_1 = _a.sent();\r\n                    logger.error(e_1);\r\n                    return [3 /*break*/, 8];\r\n                case 8:\r\n                    gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\r\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    _a.trys.push([0, 4, , 5]);\r\n                    initializationPromisesToWaitFor = [];\r\n                    if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];\r\n                    gaSendToList = gtagParams['send_to'];\r\n                    // Make it an array if is isn't, so it can be dealt with the same way.\r\n                    if (!Array.isArray(gaSendToList)) {\r\n                        gaSendToList = [gaSendToList];\r\n                    }\r\n                    return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\r\n                case 1:\r\n                    dynamicConfigResults = _a.sent();\r\n                    _loop_1 = function (sendToId) {\r\n                        // Any fetched dynamic measurement ID that matches this 'send_to' ID\r\n                        var foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === sendToId; });\r\n                        var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\r\n                        if (initializationPromise) {\r\n                            initializationPromisesToWaitFor.push(initializationPromise);\r\n                        }\r\n                        else {\r\n                            // Found an item in 'send_to' that is not associated\r\n                            // directly with an FID, possibly a group.  Empty this array,\r\n                            // exit the loop early, and let it get populated below.\r\n                            initializationPromisesToWaitFor = [];\r\n                            return \"break\";\r\n                        }\r\n                    };\r\n                    for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\r\n                        sendToId = gaSendToList_1[_i];\r\n                        state_1 = _loop_1(sendToId);\r\n                        if (state_1 === \"break\")\r\n                            break;\r\n                    }\r\n                    _a.label = 2;\r\n                case 2:\r\n                    // This will be unpopulated if there was no 'send_to' field , or\r\n                    // if not all entries in the 'send_to' field could be mapped to\r\n                    // a FID. In these cases, wait on all pending initialization promises.\r\n                    if (initializationPromisesToWaitFor.length === 0) {\r\n                        initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\r\n                    }\r\n                    // Run core gtag function with args after all relevant initialization\r\n                    // promises have been resolved.\r\n                    return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];\r\n                case 3:\r\n                    // Run core gtag function with args after all relevant initialization\r\n                    // promises have been resolved.\r\n                    _a.sent();\r\n                    // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n                    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    e_2 = _a.sent();\r\n                    logger.error(e_2);\r\n                    return [3 /*break*/, 5];\r\n                case 5: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\r\nfunction wrapGtag(gtagCore, \r\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\r\ninitializationPromisesMap, \r\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\r\ndynamicConfigPromisesList, \r\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\r\nmeasurementIdToAppId) {\r\n    /**\r\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n     * @param command Gtag command type.\r\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n     * @param gtagParams Params if event is EVENT/CONFIG.\r\n     */\r\n    function gtagWrapper(command, idOrNameOrParams, gtagParams) {\r\n        return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n            var e_3;\r\n            return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 6, , 7]);\r\n                        if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];\r\n                        // If EVENT, second arg must be measurementId.\r\n                        return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\r\n                    case 1:\r\n                        // If EVENT, second arg must be measurementId.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 2:\r\n                        if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];\r\n                        // If CONFIG, second arg must be measurementId.\r\n                        return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\r\n                    case 3:\r\n                        // If CONFIG, second arg must be measurementId.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        // If SET, second arg must be params.\r\n                        gtagCore(GtagCommand.SET, idOrNameOrParams);\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        e_3 = _a.sent();\r\n                        logger.error(e_3);\r\n                        return [3 /*break*/, 7];\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return gtagWrapper;\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\r\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    var gtagCore = function () {\r\n        var _args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            _args[_i] = arguments[_i];\r\n        }\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\r\n    return {\r\n        gtagCore: gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\r\nfunction findGtagScriptOnPage() {\r\n    var scriptTags = window.document.getElementsByTagName('script');\r\n    for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\r\n        var tag = _a[_i];\r\n        if (tag.src && tag.src.includes(GTAG_URL)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar index_esm_a;\r\nvar ERRORS = (index_esm_a = {},\r\n    index_esm_a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each appId.',\r\n    index_esm_a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    index_esm_a[\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\r\n    index_esm_a[\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    index_esm_a[\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    index_esm_a[\"fetch-throttle\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    index_esm_a[\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\r\n    index_esm_a[\"no-api-key\" /* NO_API_KEY */] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid API key.',\r\n    index_esm_a[\"no-app-id\" /* NO_APP_ID */] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid app ID.',\r\n    index_esm_a);\r\nvar ERROR_FACTORY = new util_dist_index_esm[\"b\" /* ErrorFactory */]('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\r\nvar LONG_RETRY_FACTOR = 30;\r\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\r\nvar BASE_INTERVAL_MILLIS = 1000;\r\n/**\r\n * Stubbable retry data storage class.\r\n */\r\nvar RetryData = /** @class */ (function () {\r\n    function RetryData(throttleMetadata, intervalMillis) {\r\n        if (throttleMetadata === void 0) { throttleMetadata = {}; }\r\n        if (intervalMillis === void 0) { intervalMillis = BASE_INTERVAL_MILLIS; }\r\n        this.throttleMetadata = throttleMetadata;\r\n        this.intervalMillis = intervalMillis;\r\n    }\r\n    RetryData.prototype.getThrottleMetadata = function (appId) {\r\n        return this.throttleMetadata[appId];\r\n    };\r\n    RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\r\n        this.throttleMetadata[appId] = metadata;\r\n    };\r\n    RetryData.prototype.deleteThrottleMetadata = function (appId) {\r\n        delete this.throttleMetadata[appId];\r\n    };\r\n    return RetryData;\r\n}());\r\nvar defaultRetryData = new RetryData();\r\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\r\nfunction getHeaders(apiKey) {\r\n    return new Headers({\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nfunction fetchDynamicConfig(appFields) {\r\n    var _a;\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse, _ignored_1;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    appId = appFields.appId, apiKey = appFields.apiKey;\r\n                    request = {\r\n                        method: 'GET',\r\n                        headers: getHeaders(apiKey)\r\n                    };\r\n                    appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\r\n                    return [4 /*yield*/, fetch(appUrl, request)];\r\n                case 1:\r\n                    response = _b.sent();\r\n                    if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];\r\n                    errorMessage = '';\r\n                    _b.label = 2;\r\n                case 2:\r\n                    _b.trys.push([2, 4, , 5]);\r\n                    return [4 /*yield*/, response.json()];\r\n                case 3:\r\n                    jsonResponse = (_b.sent());\r\n                    if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\r\n                        errorMessage = jsonResponse.error.message;\r\n                    }\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    _ignored_1 = _b.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 5: throw ERROR_FACTORY.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\r\n                    httpStatus: response.status,\r\n                    responseMessage: errorMessage\r\n                });\r\n                case 6: return [2 /*return*/, response.json()];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nfunction fetchDynamicConfigWithRetry(app, \r\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\r\nretryData, timeoutMillis) {\r\n    if (retryData === void 0) { retryData = defaultRetryData; }\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var _a, appId, apiKey, measurementId, throttleMetadata, signal;\r\n        var _this = this;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_b) {\r\n            _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\r\n            if (!appId) {\r\n                throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\r\n            }\r\n            if (!apiKey) {\r\n                if (measurementId) {\r\n                    return [2 /*return*/, {\r\n                            measurementId: measurementId,\r\n                            appId: appId\r\n                        }];\r\n                }\r\n                throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\r\n            }\r\n            throttleMetadata = retryData.getThrottleMetadata(appId) || {\r\n                backoffCount: 0,\r\n                throttleEndTimeMillis: Date.now()\r\n            };\r\n            signal = new AnalyticsAbortSignal();\r\n            setTimeout(function () { return Object(tslib_es6[\"b\" /* __awaiter */])(_this, void 0, void 0, function () {\r\n                return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n                    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n                    signal.abort();\r\n                    return [2 /*return*/];\r\n                });\r\n            }); }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\r\n            return [2 /*return*/, attemptFetchDynamicConfigWithRetry({ appId: appId, apiKey: apiKey, measurementId: measurementId }, throttleMetadata, signal, retryData)];\r\n        });\r\n    });\r\n}\r\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\r\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\r\n) {\r\n    var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;\r\n    if (retryData === void 0) { retryData = defaultRetryData; }\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    appId = appFields.appId, measurementId = appFields.measurementId;\r\n                    _b.label = 1;\r\n                case 1:\r\n                    _b.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];\r\n                case 2:\r\n                    _b.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _b.sent();\r\n                    if (measurementId) {\r\n                        logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" +\r\n                            (\" Falling back to the measurement ID \" + measurementId) +\r\n                            (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\r\n                        return [2 /*return*/, { appId: appId, measurementId: measurementId }];\r\n                    }\r\n                    throw e_1;\r\n                case 4:\r\n                    _b.trys.push([4, 6, , 7]);\r\n                    return [4 /*yield*/, fetchDynamicConfig(appFields)];\r\n                case 5:\r\n                    response = _b.sent();\r\n                    // Note the SDK only clears throttle state if response is success or non-retriable.\r\n                    retryData.deleteThrottleMetadata(appId);\r\n                    return [2 /*return*/, response];\r\n                case 6:\r\n                    e_2 = _b.sent();\r\n                    if (!isRetriableError(e_2)) {\r\n                        retryData.deleteThrottleMetadata(appId);\r\n                        if (measurementId) {\r\n                            logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" +\r\n                                (\" Falling back to the measurement ID \" + measurementId) +\r\n                                (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\r\n                            return [2 /*return*/, { appId: appId, measurementId: measurementId }];\r\n                        }\r\n                        else {\r\n                            throw e_2;\r\n                        }\r\n                    }\r\n                    backoffMillis = Number(e_2.customData.httpStatus) === 503\r\n                        ? Object(util_dist_index_esm[\"j\" /* calculateBackoffMillis */])(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\r\n                        : Object(util_dist_index_esm[\"j\" /* calculateBackoffMillis */])(backoffCount, retryData.intervalMillis);\r\n                    throttleMetadata = {\r\n                        throttleEndTimeMillis: Date.now() + backoffMillis,\r\n                        backoffCount: backoffCount + 1\r\n                    };\r\n                    // Persists state.\r\n                    retryData.setThrottleMetadata(appId, throttleMetadata);\r\n                    logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\r\n                    return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise(function (resolve, reject) {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        var timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(function () {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis: throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof util_dist_index_esm[\"c\" /* FirebaseError */]) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    var httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nvar AnalyticsAbortSignal = /** @class */ (function () {\r\n    function AnalyticsAbortSignal() {\r\n        this.listeners = [];\r\n    }\r\n    AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    AnalyticsAbortSignal.prototype.abort = function () {\r\n        this.listeners.forEach(function (listener) { return listener(); });\r\n    };\r\n    return AnalyticsAbortSignal;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateIndexedDB() {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var e_1;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!!Object(util_dist_index_esm[\"w\" /* isIndexedDBAvailable */])()) return [3 /*break*/, 1];\r\n                    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                        errorInfo: 'IndexedDB is not available in this environment.'\r\n                    }).message);\r\n                    return [2 /*return*/, false];\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, Object(util_dist_index_esm[\"N\" /* validateIndexedDBOpenable */])()];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _a.sent();\r\n                    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                        errorInfo: e_1\r\n                    }).message);\r\n                    return [2 /*return*/, false];\r\n                case 4: return [2 /*return*/, true];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\r\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore) {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\r\n        var _b;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\r\n                    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\r\n                    dynamicConfigPromise\r\n                        .then(function (config) {\r\n                        measurementIdToAppId[config.measurementId] = config.appId;\r\n                        if (app.options.measurementId &&\r\n                            config.measurementId !== app.options.measurementId) {\r\n                            logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" +\r\n                                (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") +\r\n                                \" To ensure analytics events are always sent to the correct Analytics property,\" +\r\n                                \" update the\" +\r\n                                \" measurement ID field in the local config or remove it from the local config.\");\r\n                        }\r\n                    })\r\n                        .catch(function (e) { return logger.error(e); });\r\n                    // Add to list to track state of all dynamic config promises.\r\n                    dynamicConfigPromisesList.push(dynamicConfigPromise);\r\n                    fidPromise = validateIndexedDB().then(function (envIsValid) {\r\n                        if (envIsValid) {\r\n                            return installations.getId();\r\n                        }\r\n                        else {\r\n                            return undefined;\r\n                        }\r\n                    });\r\n                    return [4 /*yield*/, Promise.all([\r\n                            dynamicConfigPromise,\r\n                            fidPromise\r\n                        ])];\r\n                case 1:\r\n                    _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];\r\n                    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n                    // but since it is idempotent, we can call it multiple times.\r\n                    // We keep it together with other initialization logic for better code structure.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    gtagCore('js', new Date());\r\n                    configProperties = (_b = {},\r\n                        // guard against developers accidentally setting properties with prefix `firebase_`\r\n                        _b[ORIGIN_KEY] = 'firebase',\r\n                        _b.update = true,\r\n                        _b);\r\n                    if (fid != null) {\r\n                        configProperties[GA_FID_KEY] = fid;\r\n                    }\r\n                    // It should be the first config command called on this GA-ID\r\n                    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n                    gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\r\n                    return [2 /*return*/, dynamicConfig.measurementId];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\r\nvar index_esm_initializationPromisesMap = {};\r\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\r\nvar index_esm_dynamicConfigPromisesList = [];\r\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\r\nvar index_esm_measurementIdToAppId = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nvar dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nvar gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nvar gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nvar wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nvar globalInitDone = false;\r\n/**\r\n * For testing\r\n */\r\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\r\n    if (newGlobalInitDone === void 0) { newGlobalInitDone = false; }\r\n    if (newInitializationPromisesMap === void 0) { newInitializationPromisesMap = {}; }\r\n    if (newDynamicPromises === void 0) { newDynamicPromises = []; }\r\n    globalInitDone = newGlobalInitDone;\r\n    index_esm_initializationPromisesMap = newInitializationPromisesMap;\r\n    index_esm_dynamicConfigPromisesList = newDynamicPromises;\r\n    dataLayerName = 'dataLayer';\r\n    gtagName = 'gtag';\r\n}\r\n/**\r\n * For testing\r\n */\r\nfunction getGlobalVars() {\r\n    return {\r\n        initializationPromisesMap: index_esm_initializationPromisesMap,\r\n        dynamicConfigPromisesList: index_esm_dynamicConfigPromisesList\r\n    };\r\n}\r\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\r\nfunction settings(options) {\r\n    if (globalInitDone) {\r\n        throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\r\n    }\r\n    if (options.dataLayerName) {\r\n        dataLayerName = options.dataLayerName;\r\n    }\r\n    if (options.gtagName) {\r\n        gtagName = options.gtagName;\r\n    }\r\n}\r\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\r\nfunction warnOnBrowserContextMismatch() {\r\n    var mismatchedEnvMessages = [];\r\n    if (Object(util_dist_index_esm[\"s\" /* isBrowserExtension */])()) {\r\n        mismatchedEnvMessages.push('This is a browser extension environment.');\r\n    }\r\n    if (!Object(util_dist_index_esm[\"e\" /* areCookiesEnabled */])()) {\r\n        mismatchedEnvMessages.push('Cookies are not available.');\r\n    }\r\n    if (mismatchedEnvMessages.length > 0) {\r\n        var details = mismatchedEnvMessages\r\n            .map(function (message, index) { return \"(\" + (index + 1) + \") \" + message; })\r\n            .join(' ');\r\n        var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\r\n            errorInfo: details\r\n        });\r\n        logger.warn(err.message);\r\n    }\r\n}\r\nfunction factory(app, installations) {\r\n    warnOnBrowserContextMismatch();\r\n    var appId = app.options.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\r\n    }\r\n    if (!app.options.apiKey) {\r\n        if (app.options.measurementId) {\r\n            logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" +\r\n                (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) +\r\n                \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\r\n        }\r\n    }\r\n    if (index_esm_initializationPromisesMap[appId] != null) {\r\n        throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\r\n            id: appId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        // Detect if user has already put the gtag <script> tag on this page.\r\n        if (!findGtagScriptOnPage()) {\r\n            insertScriptTag(dataLayerName);\r\n        }\r\n        getOrCreateDataLayer(dataLayerName);\r\n        var _a = wrapOrCreateGtag(index_esm_initializationPromisesMap, index_esm_dynamicConfigPromisesList, index_esm_measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    // This map reflects the completion state of all promises for each appId.\r\n    index_esm_initializationPromisesMap[appId] = initializeIds(app, index_esm_dynamicConfigPromisesList, index_esm_measurementIdToAppId, installations, gtagCoreFunction);\r\n    var analyticsInstance = {\r\n        app: app,\r\n        // Public methods return void for API simplicity and to better match gtag,\r\n        // while internal implementations return promises.\r\n        logEvent: function (eventName, eventParams, options) {\r\n            logEvent(wrappedGtagFunction, index_esm_initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setCurrentScreen: function (screenName, options) {\r\n            setCurrentScreen(wrappedGtagFunction, index_esm_initializationPromisesMap[appId], screenName, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setUserId: function (id, options) {\r\n            setUserId(wrappedGtagFunction, index_esm_initializationPromisesMap[appId], id, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setUserProperties: function (properties, options) {\r\n            setUserProperties(wrappedGtagFunction, index_esm_initializationPromisesMap[appId], properties, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setAnalyticsCollectionEnabled: function (enabled) {\r\n            setAnalyticsCollectionEnabled(index_esm_initializationPromisesMap[appId], enabled).catch(function (e) { return logger.error(e); });\r\n        },\r\n        INTERNAL: {\r\n            delete: function () {\r\n                delete index_esm_initializationPromisesMap[appId];\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n    };\r\n    return analyticsInstance;\r\n}\n\nvar index_esm_name = \"@firebase/analytics\";\nvar version = \"0.6.2\";\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nvar ANALYTICS_TYPE = 'analytics';\r\nfunction registerAnalytics(instance) {\r\n    instance.INTERNAL.registerComponent(new component_dist_index_esm[\"a\" /* Component */](ANALYTICS_TYPE, function (container) {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        var installations = container\r\n            .getProvider('installations')\r\n            .getImmediate();\r\n        return factory(app, installations);\r\n    }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\r\n        settings: settings,\r\n        EventName: EventName,\r\n        isSupported: isSupported\r\n    }));\r\n    instance.INTERNAL.registerComponent(new component_dist_index_esm[\"a\" /* Component */]('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n    instance.registerVersion(index_esm_name, version);\r\n    function internalFactory(container) {\r\n        try {\r\n            var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\r\n            return {\r\n                logEvent: analytics.logEvent\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\r\n                reason: e\r\n            });\r\n        }\r\n    }\r\n}\r\nregisterAnalytics(index_esm[\"a\" /* default */]);\r\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\r\nfunction isSupported() {\r\n    return Object(tslib_es6[\"b\" /* __awaiter */])(this, void 0, void 0, function () {\r\n        var isDBOpenable, error_1;\r\n        return Object(tslib_es6[\"d\" /* __generator */])(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (Object(util_dist_index_esm[\"s\" /* isBrowserExtension */])()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    if (!Object(util_dist_index_esm[\"e\" /* areCookiesEnabled */])()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    if (!Object(util_dist_index_esm[\"w\" /* isIndexedDBAvailable */])()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, Object(util_dist_index_esm[\"N\" /* validateIndexedDBOpenable */])()];\r\n                case 2:\r\n                    isDBOpenable = _a.sent();\r\n                    return [2 /*return*/, isDBOpenable];\r\n                case 3:\r\n                    error_1 = _a.sent();\r\n                    return [2 /*return*/, false];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\n\n\n//# sourceMappingURL=index.esm.js.map\n\n// CONCATENATED MODULE: ./node_modules/firebase/analytics/dist/index.esm.js\n\n//# sourceMappingURL=index.esm.js.map\n\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/home/raul/Documentos/Proyectos/Flexxo/flexxo-web/node_modules/@firebase/analytics/dist/index.esm.js","/home/raul/Documentos/Proyectos/Flexxo/flexxo-web/node_modules/firebase/analytics/dist/index.esm.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAyD;AACpB;AACJ;AACS;AACmI;AAC7H;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,OAAO;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,qCAAQ,CAAC,qCAAQ,GAAG,iBAAiB,2BAA2B;AAC7F;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA,mDAAmD,4BAA4B;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA,8DAA8D,gBAAgB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,uCAAM;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,+CAA+C,EAAE;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,0CAA0C,EAAE;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,4BAA4B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sCAAS;AACxB;AACA,mBAAmB,wCAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,gBAAgB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,WAAE;AACN,cAAc,WAAE,KAAK;AACrB,IAAI,WAAE,yFAAyF,IAAI;AACnG;AACA;AACA,IAAI,WAAE;AACN;AACA;AACA,IAAI,WAAE,oIAAoI,QAAQ;AAClJ,IAAI,WAAE;AACN;AACA,0EAA0E,WAAW;AACrF,IAAI,WAAE;AACN;AACA,0EAA0E,WAAW;AACrF,IAAI,WAAE;AACN,8EAA8E,uBAAuB;AACrG,IAAI,WAAE,oFAAoF,YAAY,GAAG,iBAAiB;AAC1H,IAAI,WAAE;AACN;AACA,IAAI,WAAE;AACN;AACA,IAAI,WAAE;AACN,wBAAwB,2CAAY;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE,wCAAwC,uCAAuC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D,WAAW,sCAAS;AACpB;AACA;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,QAAQ,sCAAS;AACrD,uBAAuB,wCAAW;AAClC;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,EAAE,EAAE;AACjB,sEAAsE,6DAA6D;AACnI,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,8BAA8B;AAC7D,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,6CAA6C;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,6CAA6C;AAChG;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6DAAsB;AAChD,0BAA0B,6DAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA,uBAAuB,4CAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,mBAAmB,EAAE;AACzE;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA,0BAA0B,2DAAoB;AAC9C;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yCAAyC,gEAAyB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA;AACA,eAAe,wCAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,6CAA6C,wBAAwB,EAAE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mCAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA,IAAI,mCAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,8BAAoB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,2BAA2B;AAClE,kDAAkD,mCAAmC;AACrF,wCAAwC,yBAAyB;AACjE;AACA,IAAI,mCAAyB;AAC7B,IAAI,mCAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mCAAyB;AAC5D,mCAAmC,mCAAyB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,yDAAkB;AAC1B;AACA;AACA,SAAS,wDAAiB;AAC1B;AACA;AACA;AACA;AACA,4CAA4C,2CAA2C,EAAE;AACzF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mCAAyB;AACjC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,mCAAyB,EAAE,mCAAyB,EAAE,8BAAoB;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mCAAyB,6BAA6B,mCAAyB,EAAE,8BAAoB;AACzG;AACA;AACA;AACA;AACA;AACA,0CAA0C,mCAAyB,8DAA8D,wBAAwB,EAAE;AAC3J,SAAS;AACT;AACA,kDAAkD,mCAAyB,kDAAkD,wBAAwB,EAAE;AACvJ,SAAS;AACT;AACA,2CAA2C,mCAAyB,0CAA0C,wBAAwB,EAAE;AACxI,SAAS;AACT;AACA,mDAAmD,mCAAyB,kDAAkD,wBAAwB,EAAE;AACxJ,SAAS;AACT;AACA,0CAA0C,mCAAyB,sCAAsC,wBAAwB,EAAE;AACnI,SAAS;AACT;AACA;AACA,uBAAuB,mCAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI,cAAI;AACR;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6CAAS;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL,4CAA4C,6CAAS;AACrD,6BAA6B,cAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kBAAkB,4BAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,sCAAS;AACpB;AACA,eAAe,wCAAW;AAC1B;AACA;AACA,wBAAwB,yDAAkB;AAC1C;AACA;AACA,yBAAyB,wDAAiB;AAC1C;AACA;AACA,yBAAyB,2DAAoB;AAC7C;AACA;AACA;AACA;AACA;AACA,yCAAyC,gEAAyB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEgF;AAChF;;;ACpsC6B;AAC7B","file":"x","sourcesContent":["import { __awaiter, __generator, __assign } from 'tslib';\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, calculateBackoffMillis, FirebaseError, validateIndexedDBOpenable, isIndexedDBAvailable, isBrowserExtension, areCookiesEnabled } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n// Key to attach FID to in gtag params.\r\nvar GA_FID_KEY = 'firebase_id';\r\nvar ORIGIN_KEY = 'origin';\r\nvar FETCH_TIMEOUT_MILLIS = 60 * 1000;\r\nvar DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\r\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\r\nvar GtagCommand;\r\n(function (GtagCommand) {\r\n    GtagCommand[\"EVENT\"] = \"event\";\r\n    GtagCommand[\"SET\"] = \"set\";\r\n    GtagCommand[\"CONFIG\"] = \"config\";\r\n})(GtagCommand || (GtagCommand = {}));\r\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\r\nvar EventName;\r\n(function (EventName) {\r\n    EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\r\n    EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\r\n    EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\r\n    EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\r\n    EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\r\n    /** @deprecated */\r\n    EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\r\n    EventName[\"EXCEPTION\"] = \"exception\";\r\n    EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\r\n    EventName[\"LOGIN\"] = \"login\";\r\n    EventName[\"PAGE_VIEW\"] = \"page_view\";\r\n    EventName[\"PURCHASE\"] = \"purchase\";\r\n    EventName[\"REFUND\"] = \"refund\";\r\n    EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\r\n    EventName[\"SCREEN_VIEW\"] = \"screen_view\";\r\n    EventName[\"SEARCH\"] = \"search\";\r\n    EventName[\"SELECT_CONTENT\"] = \"select_content\";\r\n    EventName[\"SELECT_ITEM\"] = \"select_item\";\r\n    EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\r\n    /** @deprecated */\r\n    EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\r\n    EventName[\"SHARE\"] = \"share\";\r\n    EventName[\"SIGN_UP\"] = \"sign_up\";\r\n    EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\r\n    EventName[\"VIEW_CART\"] = \"view_cart\";\r\n    EventName[\"VIEW_ITEM\"] = \"view_item\";\r\n    EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\r\n    EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\r\n    EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\r\n})(EventName || (EventName = {}));\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\r\nfunction logEvent(gtagFunction, initializationPromise, eventName, eventParams, options) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var measurementId, params;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\r\n                    return [2 /*return*/];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    params = __assign(__assign({}, eventParams), { 'send_to': measurementId });\r\n                    gtagFunction(GtagCommand.EVENT, eventName, params);\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\r\nfunction setCurrentScreen(gtagFunction, initializationPromise, screenName, options) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'screen_name': screenName\r\n                    });\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\r\nfunction setUserId(gtagFunction, initializationPromise, id, options) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    gtagFunction(GtagCommand.SET, { 'user_id': id });\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _a.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'user_id': id\r\n                    });\r\n                    _a.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\r\nfunction setUserProperties(gtagFunction, initializationPromise, properties, options) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var flatProperties, _i, _a, key, measurementId;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    if (!(options && options.global)) return [3 /*break*/, 1];\r\n                    flatProperties = {};\r\n                    for (_i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\r\n                        key = _a[_i];\r\n                        // use dot notation for merge behavior in gtag.js\r\n                        flatProperties[\"user_properties.\" + key] = properties[key];\r\n                    }\r\n                    gtagFunction(GtagCommand.SET, flatProperties);\r\n                    return [2 /*return*/, Promise.resolve()];\r\n                case 1: return [4 /*yield*/, initializationPromise];\r\n                case 2:\r\n                    measurementId = _b.sent();\r\n                    gtagFunction(GtagCommand.CONFIG, measurementId, {\r\n                        update: true,\r\n                        'user_properties': properties\r\n                    });\r\n                    _b.label = 3;\r\n                case 3: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\r\nfunction setAnalyticsCollectionEnabled(initializationPromise, enabled) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var measurementId;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, initializationPromise];\r\n                case 1:\r\n                    measurementId = _a.sent();\r\n                    window[\"ga-disable-\" + measurementId] = !enabled;\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar logger = new Logger('@firebase/analytics');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Inserts gtag script tag into the page to asynchronously download gtag.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction insertScriptTag(dataLayerName) {\r\n    var script = document.createElement('script');\r\n    // We are not providing an analyticsId in the URL because it would trigger a `page_view`\r\n    // without fid. We will initialize ga-id using gtag (config) command together with fid.\r\n    script.src = GTAG_URL + \"?l=\" + dataLayerName;\r\n    script.async = true;\r\n    document.head.appendChild(script);\r\n}\r\n/**\r\n * Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\r\n */\r\nfunction getOrCreateDataLayer(dataLayerName) {\r\n    // Check for existing dataLayer and create if needed.\r\n    var dataLayer = [];\r\n    if (Array.isArray(window[dataLayerName])) {\r\n        dataLayer = window[dataLayerName];\r\n    }\r\n    else {\r\n        window[dataLayerName] = dataLayer;\r\n    }\r\n    return dataLayer;\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'config' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param measurementId GA Measurement ID to set config for.\r\n * @param gtagParams Gtag config params to set.\r\n */\r\nfunction gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var correspondingAppId, dynamicConfigResults, foundConfig, e_1;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    correspondingAppId = measurementIdToAppId[measurementId];\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 7, , 8]);\r\n                    if (!correspondingAppId) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, initializationPromisesMap[correspondingAppId]];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 3: return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\r\n                case 4:\r\n                    dynamicConfigResults = _a.sent();\r\n                    foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === measurementId; });\r\n                    if (!foundConfig) return [3 /*break*/, 6];\r\n                    return [4 /*yield*/, initializationPromisesMap[foundConfig.appId]];\r\n                case 5:\r\n                    _a.sent();\r\n                    _a.label = 6;\r\n                case 6: return [3 /*break*/, 8];\r\n                case 7:\r\n                    e_1 = _a.sent();\r\n                    logger.error(e_1);\r\n                    return [3 /*break*/, 8];\r\n                case 8:\r\n                    gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Wrapped gtag logic when gtag is called with 'event' command.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementId GA Measurement ID to log event to.\r\n * @param gtagParams Params to log with this event.\r\n */\r\nfunction gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    _a.trys.push([0, 4, , 5]);\r\n                    initializationPromisesToWaitFor = [];\r\n                    if (!(gtagParams && gtagParams['send_to'])) return [3 /*break*/, 2];\r\n                    gaSendToList = gtagParams['send_to'];\r\n                    // Make it an array if is isn't, so it can be dealt with the same way.\r\n                    if (!Array.isArray(gaSendToList)) {\r\n                        gaSendToList = [gaSendToList];\r\n                    }\r\n                    return [4 /*yield*/, Promise.all(dynamicConfigPromisesList)];\r\n                case 1:\r\n                    dynamicConfigResults = _a.sent();\r\n                    _loop_1 = function (sendToId) {\r\n                        // Any fetched dynamic measurement ID that matches this 'send_to' ID\r\n                        var foundConfig = dynamicConfigResults.find(function (config) { return config.measurementId === sendToId; });\r\n                        var initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];\r\n                        if (initializationPromise) {\r\n                            initializationPromisesToWaitFor.push(initializationPromise);\r\n                        }\r\n                        else {\r\n                            // Found an item in 'send_to' that is not associated\r\n                            // directly with an FID, possibly a group.  Empty this array,\r\n                            // exit the loop early, and let it get populated below.\r\n                            initializationPromisesToWaitFor = [];\r\n                            return \"break\";\r\n                        }\r\n                    };\r\n                    for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\r\n                        sendToId = gaSendToList_1[_i];\r\n                        state_1 = _loop_1(sendToId);\r\n                        if (state_1 === \"break\")\r\n                            break;\r\n                    }\r\n                    _a.label = 2;\r\n                case 2:\r\n                    // This will be unpopulated if there was no 'send_to' field , or\r\n                    // if not all entries in the 'send_to' field could be mapped to\r\n                    // a FID. In these cases, wait on all pending initialization promises.\r\n                    if (initializationPromisesToWaitFor.length === 0) {\r\n                        initializationPromisesToWaitFor = Object.values(initializationPromisesMap);\r\n                    }\r\n                    // Run core gtag function with args after all relevant initialization\r\n                    // promises have been resolved.\r\n                    return [4 /*yield*/, Promise.all(initializationPromisesToWaitFor)];\r\n                case 3:\r\n                    // Run core gtag function with args after all relevant initialization\r\n                    // promises have been resolved.\r\n                    _a.sent();\r\n                    // Workaround for http://b/141370449 - third argument cannot be undefined.\r\n                    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    e_2 = _a.sent();\r\n                    logger.error(e_2);\r\n                    return [3 /*break*/, 5];\r\n                case 5: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer.\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n */\r\nfunction wrapGtag(gtagCore, \r\n/**\r\n * Allows wrapped gtag calls to wait on whichever intialization promises are required,\r\n * depending on the contents of the gtag params' `send_to` field, if any.\r\n */\r\ninitializationPromisesMap, \r\n/**\r\n * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\r\n * before determining what initialization promises (which include FIDs) to wait for.\r\n */\r\ndynamicConfigPromisesList, \r\n/**\r\n * Wrapped gtag config calls can narrow down which initialization promise (with FID)\r\n * to wait for if the measurementId is already fetched, by getting the corresponding appId,\r\n * which is the key for the initialization promises map.\r\n */\r\nmeasurementIdToAppId) {\r\n    /**\r\n     * Wrapper around gtag that ensures FID is sent with gtag calls.\r\n     * @param command Gtag command type.\r\n     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\r\n     * @param gtagParams Params if event is EVENT/CONFIG.\r\n     */\r\n    function gtagWrapper(command, idOrNameOrParams, gtagParams) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_3;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 6, , 7]);\r\n                        if (!(command === GtagCommand.EVENT)) return [3 /*break*/, 2];\r\n                        // If EVENT, second arg must be measurementId.\r\n                        return [4 /*yield*/, gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, idOrNameOrParams, gtagParams)];\r\n                    case 1:\r\n                        // If EVENT, second arg must be measurementId.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 2:\r\n                        if (!(command === GtagCommand.CONFIG)) return [3 /*break*/, 4];\r\n                        // If CONFIG, second arg must be measurementId.\r\n                        return [4 /*yield*/, gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, idOrNameOrParams, gtagParams)];\r\n                    case 3:\r\n                        // If CONFIG, second arg must be measurementId.\r\n                        _a.sent();\r\n                        return [3 /*break*/, 5];\r\n                    case 4:\r\n                        // If SET, second arg must be params.\r\n                        gtagCore(GtagCommand.SET, idOrNameOrParams);\r\n                        _a.label = 5;\r\n                    case 5: return [3 /*break*/, 7];\r\n                    case 6:\r\n                        e_3 = _a.sent();\r\n                        logger.error(e_3);\r\n                        return [3 /*break*/, 7];\r\n                    case 7: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    return gtagWrapper;\r\n}\r\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializationPromisesMap Map of appIds to their initialization promises.\r\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\r\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\r\n */\r\nfunction wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {\r\n    // Create a basic core gtag function\r\n    var gtagCore = function () {\r\n        var _args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            _args[_i] = arguments[_i];\r\n        }\r\n        // Must push IArguments object, not an array.\r\n        window[dataLayerName].push(arguments);\r\n    };\r\n    // Replace it with existing one if found\r\n    if (window[gtagFunctionName] &&\r\n        typeof window[gtagFunctionName] === 'function') {\r\n        // @ts-ignore\r\n        gtagCore = window[gtagFunctionName];\r\n    }\r\n    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);\r\n    return {\r\n        gtagCore: gtagCore,\r\n        wrappedGtag: window[gtagFunctionName]\r\n    };\r\n}\r\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\r\nfunction findGtagScriptOnPage() {\r\n    var scriptTags = window.document.getElementsByTagName('script');\r\n    for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\r\n        var tag = _a[_i];\r\n        if (tag.src && tag.src.includes(GTAG_URL)) {\r\n            return tag;\r\n        }\r\n    }\r\n    return null;\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a;\r\nvar ERRORS = (_a = {},\r\n    _a[\"already-exists\" /* ALREADY_EXISTS */] = 'A Firebase Analytics instance with the appId {$id} ' +\r\n        ' already exists. ' +\r\n        'Only one Firebase Analytics instance can be created for each appId.',\r\n    _a[\"already-initialized\" /* ALREADY_INITIALIZED */] = 'Firebase Analytics has already been initialized.' +\r\n        'settings() must be called before initializing any Analytics instance' +\r\n        'or it will have no effect.',\r\n    _a[\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */] = 'Firebase Analytics Interop Component failed to instantiate: {$reason}',\r\n    _a[\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */] = 'Firebase Analytics is not supported in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    _a[\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */] = 'IndexedDB unavailable or restricted in this environment. ' +\r\n        'Wrap initialization of analytics in analytics.isSupported() ' +\r\n        'to prevent initialization in unsupported environments. Details: {$errorInfo}',\r\n    _a[\"fetch-throttle\" /* FETCH_THROTTLE */] = 'The config fetch request timed out while in an exponential backoff state.' +\r\n        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\r\n    _a[\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */] = 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\r\n    _a[\"no-api-key\" /* NO_API_KEY */] = 'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid API key.',\r\n    _a[\"no-app-id\" /* NO_APP_ID */] = 'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\r\n        'contain a valid app ID.',\r\n    _a);\r\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Backoff factor for 503 errors, which we want to be conservative about\r\n * to avoid overloading servers. Each retry interval will be\r\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\r\n * will be ~30 seconds (with fuzzing).\r\n */\r\nvar LONG_RETRY_FACTOR = 30;\r\n/**\r\n * Base wait interval to multiplied by backoffFactor^backoffCount.\r\n */\r\nvar BASE_INTERVAL_MILLIS = 1000;\r\n/**\r\n * Stubbable retry data storage class.\r\n */\r\nvar RetryData = /** @class */ (function () {\r\n    function RetryData(throttleMetadata, intervalMillis) {\r\n        if (throttleMetadata === void 0) { throttleMetadata = {}; }\r\n        if (intervalMillis === void 0) { intervalMillis = BASE_INTERVAL_MILLIS; }\r\n        this.throttleMetadata = throttleMetadata;\r\n        this.intervalMillis = intervalMillis;\r\n    }\r\n    RetryData.prototype.getThrottleMetadata = function (appId) {\r\n        return this.throttleMetadata[appId];\r\n    };\r\n    RetryData.prototype.setThrottleMetadata = function (appId, metadata) {\r\n        this.throttleMetadata[appId] = metadata;\r\n    };\r\n    RetryData.prototype.deleteThrottleMetadata = function (appId) {\r\n        delete this.throttleMetadata[appId];\r\n    };\r\n    return RetryData;\r\n}());\r\nvar defaultRetryData = new RetryData();\r\n/**\r\n * Set GET request headers.\r\n * @param apiKey App API key.\r\n */\r\nfunction getHeaders(apiKey) {\r\n    return new Headers({\r\n        Accept: 'application/json',\r\n        'x-goog-api-key': apiKey\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nfunction fetchDynamicConfig(appFields) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse, _ignored_1;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    appId = appFields.appId, apiKey = appFields.apiKey;\r\n                    request = {\r\n                        method: 'GET',\r\n                        headers: getHeaders(apiKey)\r\n                    };\r\n                    appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\r\n                    return [4 /*yield*/, fetch(appUrl, request)];\r\n                case 1:\r\n                    response = _b.sent();\r\n                    if (!(response.status !== 200 && response.status !== 304)) return [3 /*break*/, 6];\r\n                    errorMessage = '';\r\n                    _b.label = 2;\r\n                case 2:\r\n                    _b.trys.push([2, 4, , 5]);\r\n                    return [4 /*yield*/, response.json()];\r\n                case 3:\r\n                    jsonResponse = (_b.sent());\r\n                    if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {\r\n                        errorMessage = jsonResponse.error.message;\r\n                    }\r\n                    return [3 /*break*/, 5];\r\n                case 4:\r\n                    _ignored_1 = _b.sent();\r\n                    return [3 /*break*/, 5];\r\n                case 5: throw ERROR_FACTORY.create(\"config-fetch-failed\" /* CONFIG_FETCH_FAILED */, {\r\n                    httpStatus: response.status,\r\n                    responseMessage: errorMessage\r\n                });\r\n                case 6: return [2 /*return*/, response.json()];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Fetches dynamic config from backend, retrying if failed.\r\n * @param app Firebase app to fetch config for.\r\n */\r\nfunction fetchDynamicConfigWithRetry(app, \r\n// retryData and timeoutMillis are parameterized to allow passing a different value for testing.\r\nretryData, timeoutMillis) {\r\n    if (retryData === void 0) { retryData = defaultRetryData; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var _a, appId, apiKey, measurementId, throttleMetadata, signal;\r\n        var _this = this;\r\n        return __generator(this, function (_b) {\r\n            _a = app.options, appId = _a.appId, apiKey = _a.apiKey, measurementId = _a.measurementId;\r\n            if (!appId) {\r\n                throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\r\n            }\r\n            if (!apiKey) {\r\n                if (measurementId) {\r\n                    return [2 /*return*/, {\r\n                            measurementId: measurementId,\r\n                            appId: appId\r\n                        }];\r\n                }\r\n                throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\r\n            }\r\n            throttleMetadata = retryData.getThrottleMetadata(appId) || {\r\n                backoffCount: 0,\r\n                throttleEndTimeMillis: Date.now()\r\n            };\r\n            signal = new AnalyticsAbortSignal();\r\n            setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {\r\n                return __generator(this, function (_a) {\r\n                    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\r\n                    signal.abort();\r\n                    return [2 /*return*/];\r\n                });\r\n            }); }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);\r\n            return [2 /*return*/, attemptFetchDynamicConfigWithRetry({ appId: appId, apiKey: apiKey, measurementId: measurementId }, throttleMetadata, signal, retryData)];\r\n        });\r\n    });\r\n}\r\n/**\r\n * Runs one retry attempt.\r\n * @param appFields Necessary app config fields.\r\n * @param throttleMetadata Ongoing metadata to determine throttling times.\r\n * @param signal Abort signal.\r\n */\r\nfunction attemptFetchDynamicConfigWithRetry(appFields, _a, signal, retryData // for testing\r\n) {\r\n    var throttleEndTimeMillis = _a.throttleEndTimeMillis, backoffCount = _a.backoffCount;\r\n    if (retryData === void 0) { retryData = defaultRetryData; }\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;\r\n        return __generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0:\r\n                    appId = appFields.appId, measurementId = appFields.measurementId;\r\n                    _b.label = 1;\r\n                case 1:\r\n                    _b.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, setAbortableTimeout(signal, throttleEndTimeMillis)];\r\n                case 2:\r\n                    _b.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _b.sent();\r\n                    if (measurementId) {\r\n                        logger.warn(\"Timed out fetching this Firebase app's measurement ID from the server.\" +\r\n                            (\" Falling back to the measurement ID \" + measurementId) +\r\n                            (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_1.message + \"]\"));\r\n                        return [2 /*return*/, { appId: appId, measurementId: measurementId }];\r\n                    }\r\n                    throw e_1;\r\n                case 4:\r\n                    _b.trys.push([4, 6, , 7]);\r\n                    return [4 /*yield*/, fetchDynamicConfig(appFields)];\r\n                case 5:\r\n                    response = _b.sent();\r\n                    // Note the SDK only clears throttle state if response is success or non-retriable.\r\n                    retryData.deleteThrottleMetadata(appId);\r\n                    return [2 /*return*/, response];\r\n                case 6:\r\n                    e_2 = _b.sent();\r\n                    if (!isRetriableError(e_2)) {\r\n                        retryData.deleteThrottleMetadata(appId);\r\n                        if (measurementId) {\r\n                            logger.warn(\"Failed to fetch this Firebase app's measurement ID from the server.\" +\r\n                                (\" Falling back to the measurement ID \" + measurementId) +\r\n                                (\" provided in the \\\"measurementId\\\" field in the local Firebase config. [\" + e_2.message + \"]\"));\r\n                            return [2 /*return*/, { appId: appId, measurementId: measurementId }];\r\n                        }\r\n                        else {\r\n                            throw e_2;\r\n                        }\r\n                    }\r\n                    backoffMillis = Number(e_2.customData.httpStatus) === 503\r\n                        ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)\r\n                        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\r\n                    throttleMetadata = {\r\n                        throttleEndTimeMillis: Date.now() + backoffMillis,\r\n                        backoffCount: backoffCount + 1\r\n                    };\r\n                    // Persists state.\r\n                    retryData.setThrottleMetadata(appId, throttleMetadata);\r\n                    logger.debug(\"Calling attemptFetch again in \" + backoffMillis + \" millis\");\r\n                    return [2 /*return*/, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\r\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\r\n    return new Promise(function (resolve, reject) {\r\n        // Derives backoff from given end time, normalizing negative numbers to zero.\r\n        var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\r\n        var timeout = setTimeout(resolve, backoffMillis);\r\n        // Adds listener, rather than sets onabort, because signal is a shared object.\r\n        signal.addEventListener(function () {\r\n            clearTimeout(timeout);\r\n            // If the request completes before this timeout, the rejection has no effect.\r\n            reject(ERROR_FACTORY.create(\"fetch-throttle\" /* FETCH_THROTTLE */, {\r\n                throttleEndTimeMillis: throttleEndTimeMillis\r\n            }));\r\n        });\r\n    });\r\n}\r\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\r\nfunction isRetriableError(e) {\r\n    if (!(e instanceof FirebaseError) || !e.customData) {\r\n        return false;\r\n    }\r\n    // Uses string index defined by ErrorData, which FirebaseError implements.\r\n    var httpStatus = Number(e.customData['httpStatus']);\r\n    return (httpStatus === 429 ||\r\n        httpStatus === 500 ||\r\n        httpStatus === 503 ||\r\n        httpStatus === 504);\r\n}\r\n/**\r\n * Shims a minimal AbortSignal (copied from Remote Config).\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\r\nvar AnalyticsAbortSignal = /** @class */ (function () {\r\n    function AnalyticsAbortSignal() {\r\n        this.listeners = [];\r\n    }\r\n    AnalyticsAbortSignal.prototype.addEventListener = function (listener) {\r\n        this.listeners.push(listener);\r\n    };\r\n    AnalyticsAbortSignal.prototype.abort = function () {\r\n        this.listeners.forEach(function (listener) { return listener(); });\r\n    };\r\n    return AnalyticsAbortSignal;\r\n}());\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nfunction validateIndexedDB() {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var e_1;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (!!isIndexedDBAvailable()) return [3 /*break*/, 1];\r\n                    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                        errorInfo: 'IndexedDB is not available in this environment.'\r\n                    }).message);\r\n                    return [2 /*return*/, false];\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, validateIndexedDBOpenable()];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    e_1 = _a.sent();\r\n                    logger.warn(ERROR_FACTORY.create(\"indexeddb-unavailable\" /* INDEXEDDB_UNAVAILABLE */, {\r\n                        errorInfo: e_1\r\n                    }).message);\r\n                    return [2 /*return*/, false];\r\n                case 4: return [2 /*return*/, true];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\r\n * @param measurementIdToAppId Maps measurementID to appID.\r\n * @param installations FirebaseInstallations instance.\r\n *\r\n * @returns Measurement ID.\r\n */\r\nfunction initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var dynamicConfigPromise, fidPromise, _a, dynamicConfig, fid, configProperties;\r\n        var _b;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\r\n                    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\r\n                    dynamicConfigPromise\r\n                        .then(function (config) {\r\n                        measurementIdToAppId[config.measurementId] = config.appId;\r\n                        if (app.options.measurementId &&\r\n                            config.measurementId !== app.options.measurementId) {\r\n                            logger.warn(\"The measurement ID in the local Firebase config (\" + app.options.measurementId + \")\" +\r\n                                (\" does not match the measurement ID fetched from the server (\" + config.measurementId + \").\") +\r\n                                \" To ensure analytics events are always sent to the correct Analytics property,\" +\r\n                                \" update the\" +\r\n                                \" measurement ID field in the local config or remove it from the local config.\");\r\n                        }\r\n                    })\r\n                        .catch(function (e) { return logger.error(e); });\r\n                    // Add to list to track state of all dynamic config promises.\r\n                    dynamicConfigPromisesList.push(dynamicConfigPromise);\r\n                    fidPromise = validateIndexedDB().then(function (envIsValid) {\r\n                        if (envIsValid) {\r\n                            return installations.getId();\r\n                        }\r\n                        else {\r\n                            return undefined;\r\n                        }\r\n                    });\r\n                    return [4 /*yield*/, Promise.all([\r\n                            dynamicConfigPromise,\r\n                            fidPromise\r\n                        ])];\r\n                case 1:\r\n                    _a = _c.sent(), dynamicConfig = _a[0], fid = _a[1];\r\n                    // This command initializes gtag.js and only needs to be called once for the entire web app,\r\n                    // but since it is idempotent, we can call it multiple times.\r\n                    // We keep it together with other initialization logic for better code structure.\r\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                    gtagCore('js', new Date());\r\n                    configProperties = (_b = {},\r\n                        // guard against developers accidentally setting properties with prefix `firebase_`\r\n                        _b[ORIGIN_KEY] = 'firebase',\r\n                        _b.update = true,\r\n                        _b);\r\n                    if (fid != null) {\r\n                        configProperties[GA_FID_KEY] = fid;\r\n                    }\r\n                    // It should be the first config command called on this GA-ID\r\n                    // Initialize this GA-ID and set FID on it using the gtag config API.\r\n                    gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\r\n                    return [2 /*return*/, dynamicConfig.measurementId];\r\n            }\r\n        });\r\n    });\r\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/**\r\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\r\n * all or some of these, depending on the call's `send_to` param and the status\r\n * of the dynamic config fetches (see below).\r\n */\r\nvar initializationPromisesMap = {};\r\n/**\r\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\r\n * wait on all these to be complete in order to determine if it can selectively\r\n * wait for only certain initialization (FID) promises or if it must wait for all.\r\n */\r\nvar dynamicConfigPromisesList = [];\r\n/**\r\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\r\n * fetch completes. If already populated, gtag config calls can use this to\r\n * selectively wait for only this app's initialization promise (FID) instead of all\r\n * initialization promises.\r\n */\r\nvar measurementIdToAppId = {};\r\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\r\nvar dataLayerName = 'dataLayer';\r\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\r\nvar gtagName = 'gtag';\r\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\r\nvar gtagCoreFunction;\r\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\r\nvar wrappedGtagFunction;\r\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\r\nvar globalInitDone = false;\r\n/**\r\n * For testing\r\n */\r\nfunction resetGlobalVars(newGlobalInitDone, newInitializationPromisesMap, newDynamicPromises) {\r\n    if (newGlobalInitDone === void 0) { newGlobalInitDone = false; }\r\n    if (newInitializationPromisesMap === void 0) { newInitializationPromisesMap = {}; }\r\n    if (newDynamicPromises === void 0) { newDynamicPromises = []; }\r\n    globalInitDone = newGlobalInitDone;\r\n    initializationPromisesMap = newInitializationPromisesMap;\r\n    dynamicConfigPromisesList = newDynamicPromises;\r\n    dataLayerName = 'dataLayer';\r\n    gtagName = 'gtag';\r\n}\r\n/**\r\n * For testing\r\n */\r\nfunction getGlobalVars() {\r\n    return {\r\n        initializationPromisesMap: initializationPromisesMap,\r\n        dynamicConfigPromisesList: dynamicConfigPromisesList\r\n    };\r\n}\r\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\r\nfunction settings(options) {\r\n    if (globalInitDone) {\r\n        throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */);\r\n    }\r\n    if (options.dataLayerName) {\r\n        dataLayerName = options.dataLayerName;\r\n    }\r\n    if (options.gtagName) {\r\n        gtagName = options.gtagName;\r\n    }\r\n}\r\n/**\r\n * Returns true if no environment mismatch is found.\r\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\r\n * error that also lists details for each mismatch found.\r\n */\r\nfunction warnOnBrowserContextMismatch() {\r\n    var mismatchedEnvMessages = [];\r\n    if (isBrowserExtension()) {\r\n        mismatchedEnvMessages.push('This is a browser extension environment.');\r\n    }\r\n    if (!areCookiesEnabled()) {\r\n        mismatchedEnvMessages.push('Cookies are not available.');\r\n    }\r\n    if (mismatchedEnvMessages.length > 0) {\r\n        var details = mismatchedEnvMessages\r\n            .map(function (message, index) { return \"(\" + (index + 1) + \") \" + message; })\r\n            .join(' ');\r\n        var err = ERROR_FACTORY.create(\"invalid-analytics-context\" /* INVALID_ANALYTICS_CONTEXT */, {\r\n            errorInfo: details\r\n        });\r\n        logger.warn(err.message);\r\n    }\r\n}\r\nfunction factory(app, installations) {\r\n    warnOnBrowserContextMismatch();\r\n    var appId = app.options.appId;\r\n    if (!appId) {\r\n        throw ERROR_FACTORY.create(\"no-app-id\" /* NO_APP_ID */);\r\n    }\r\n    if (!app.options.apiKey) {\r\n        if (app.options.measurementId) {\r\n            logger.warn(\"The \\\"apiKey\\\" field is empty in the local Firebase config. This is needed to fetch the latest\" +\r\n                (\" measurement ID for this Firebase app. Falling back to the measurement ID \" + app.options.measurementId) +\r\n                \" provided in the \\\"measurementId\\\" field in the local Firebase config.\");\r\n        }\r\n        else {\r\n            throw ERROR_FACTORY.create(\"no-api-key\" /* NO_API_KEY */);\r\n        }\r\n    }\r\n    if (initializationPromisesMap[appId] != null) {\r\n        throw ERROR_FACTORY.create(\"already-exists\" /* ALREADY_EXISTS */, {\r\n            id: appId\r\n        });\r\n    }\r\n    if (!globalInitDone) {\r\n        // Steps here should only be done once per page: creation or wrapping\r\n        // of dataLayer and global gtag function.\r\n        // Detect if user has already put the gtag <script> tag on this page.\r\n        if (!findGtagScriptOnPage()) {\r\n            insertScriptTag(dataLayerName);\r\n        }\r\n        getOrCreateDataLayer(dataLayerName);\r\n        var _a = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a.wrappedGtag, gtagCore = _a.gtagCore;\r\n        wrappedGtagFunction = wrappedGtag;\r\n        gtagCoreFunction = gtagCore;\r\n        globalInitDone = true;\r\n    }\r\n    // Async but non-blocking.\r\n    // This map reflects the completion state of all promises for each appId.\r\n    initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction);\r\n    var analyticsInstance = {\r\n        app: app,\r\n        // Public methods return void for API simplicity and to better match gtag,\r\n        // while internal implementations return promises.\r\n        logEvent: function (eventName, eventParams, options) {\r\n            logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setCurrentScreen: function (screenName, options) {\r\n            setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setUserId: function (id, options) {\r\n            setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setUserProperties: function (properties, options) {\r\n            setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function (e) { return logger.error(e); });\r\n        },\r\n        setAnalyticsCollectionEnabled: function (enabled) {\r\n            setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function (e) { return logger.error(e); });\r\n        },\r\n        INTERNAL: {\r\n            delete: function () {\r\n                delete initializationPromisesMap[appId];\r\n                return Promise.resolve();\r\n            }\r\n        }\r\n    };\r\n    return analyticsInstance;\r\n}\n\nvar name = \"@firebase/analytics\";\nvar version = \"0.6.2\";\n\n/**\r\n * Type constant for Firebase Analytics.\r\n */\r\nvar ANALYTICS_TYPE = 'analytics';\r\nfunction registerAnalytics(instance) {\r\n    instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\r\n        // getImmediate for FirebaseApp will always succeed\r\n        var app = container.getProvider('app').getImmediate();\r\n        var installations = container\r\n            .getProvider('installations')\r\n            .getImmediate();\r\n        return factory(app, installations);\r\n    }, \"PUBLIC\" /* PUBLIC */).setServiceProps({\r\n        settings: settings,\r\n        EventName: EventName,\r\n        isSupported: isSupported\r\n    }));\r\n    instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\" /* PRIVATE */));\r\n    instance.registerVersion(name, version);\r\n    function internalFactory(container) {\r\n        try {\r\n            var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\r\n            return {\r\n                logEvent: analytics.logEvent\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw ERROR_FACTORY.create(\"interop-component-reg-failed\" /* INTEROP_COMPONENT_REG_FAILED */, {\r\n                reason: e\r\n            });\r\n        }\r\n    }\r\n}\r\nregisterAnalytics(firebase);\r\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\r\nfunction isSupported() {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        var isDBOpenable, error_1;\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    if (isBrowserExtension()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    if (!areCookiesEnabled()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    if (!isIndexedDBAvailable()) {\r\n                        return [2 /*return*/, false];\r\n                    }\r\n                    _a.label = 1;\r\n                case 1:\r\n                    _a.trys.push([1, 3, , 4]);\r\n                    return [4 /*yield*/, validateIndexedDBOpenable()];\r\n                case 2:\r\n                    isDBOpenable = _a.sent();\r\n                    return [2 /*return*/, isDBOpenable];\r\n                case 3:\r\n                    error_1 = _a.sent();\r\n                    return [2 /*return*/, false];\r\n                case 4: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\n\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };\n//# sourceMappingURL=index.esm.js.map\n","import '@firebase/analytics';\n//# sourceMappingURL=index.esm.js.map\n"]}}